# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

executors:
  sfs-node:
    machine: true
    resource_class: vsb2007/small

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  devsecops: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build
#      - sca
#      - sast

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
    build:
      executor: sfs-node
      steps:
        # Checkout the code as the first step.
        - checkout
        # Use mvn clean and package as the standard maven build phase
        - run:
            name: Build application
            command: docker run -v $CIRCLE_WORKING_DIRECTORY:/project --rm maven:3.3.9-jdk-8 mvn compile war:war -f /project
         #Then run your tests!
        - run:
            name: docker build
            command: docker build -f Dockerfile -t $DOCKER_REGISTRY/docker-image-name:latest .
        - run:
            name: docker push
            command: |
              docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD" "$DOCKER_REGISTRY"
              docker push $DOCKER_REGISTRY/docker-image-name:latest
#        - run:
#            name: Upload Artefact
#            command: |
#              bash ci-cd/set_setting_maven.sh
#              packaging="war"
#              file_name="target/ccardApi-1.0.war"
#              groupId="circleci.sfs.test"
#              artifactId="ccardApi"
#              war_version="1.0"
#              mvn deploy:deploy-file -DgeneratePom=true \
#                      -DrepositoryId=maven-proxy \
#                      -Durl=$NEXUS_MAVEN_URL \
#                      -Dpackaging=$packaging \
#                      -Dfile=$file_name \
#                      -DgroupId=$groupId \
#                      -DartifactId=$artifactId \
#                      -Dversion=$war_version \
#                      || exit 1
#        - store_artifacts:
#            path: target/ccardApi-1.0.war
#            destination: ccardApi-1.0.war
#  sca:
#    executor: sfs-node
#    steps:
#      - run: docker ps
#      - run:
#          name: get cli
#          command: |
#            curl --user $NEXUS_LOGIN:$NEXUS_PASSWORD $HUB_CLI_URL --output hub-ci.zip
#            unzip -p hub-ci.zip tools/appsec-cli.zip > appsec-cli.zip
#            unzip appsec-cli.zip -d appsec-cli
#            python3 appsec-cli/scan_codebase.py \
#                --url  $HUB_URL \
#                --token "${HUB_TOKEN}" \
#                --appcode "$HUB_APP_CODE" \
#                --codebase-url https://github.com/vsb2007/CCardApi.git \
#                --codebase-name "ccard-master" \
#                --codebase-build-tool maven \
#                --branch "master" \
#                --unit "ccard"
#            sleep 3600